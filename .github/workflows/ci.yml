name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'Makefile'
      - 'README.md'
      - '.github/**'
      - 'database/**'
      - 'config/**'
      - 'controllers/**'
      - 'models/**'
      - 'routes/**'
      - 'tests/**'
      - 'web/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'Makefile'
      - '.github/**'
      - 'database/**'
      - 'config/**'
      - 'controllers/**'
      - 'models/**'
      - 'routes/**'
      - 'tests/**'
      - 'web/**'
  workflow_dispatch:

env:
  DOCKER_IMAGE: stanford-students-api
  DOCKER_TAG: v1
  POSTGRES_DB: stanford_students
  POSTGRES_USER: admin_stan
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  ci:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: false

    - name: Cache Go modules (corruption-resistant)
      uses: actions/cache@v3
      with:
        path: |
          /tmp/go-build-cache
          /tmp/go-mod-cache
        key: ${{ runner.os }}-go-v4-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-v4-
      continue-on-error: true

    - name: Create .env for CI
      run: |
        echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
        echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
        echo "PORT=8080" >> .env
        echo "LOG_LEVEL=info" >> .env

    - name: Setup Go cache environment
      run: |
        echo "üîß Setting up Go cache environment..."
        # Use custom cache directories to avoid corruption
        export GOCACHE=/tmp/go-build-cache
        export GOMODCACHE=/tmp/go-mod-cache
        mkdir -p $GOCACHE $GOMODCACHE
        echo "GOCACHE=/tmp/go-build-cache" >> $GITHUB_ENV
        echo "GOMODCACHE=/tmp/go-mod-cache" >> $GITHUB_ENV
        echo "‚úÖ Cache environment configured"
        
    - name: Install dependencies
      run: make deps

    # - name: Format code
    #   run: |
    #     echo "üîß Formatting Go code..."
    #     make fmt
    #     echo "‚úÖ Code formatting completed"

    - name: Run linting
      run: |
        # Install golangci-lint if not present
        if ! command -v golangci-lint &> /dev/null; then
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          export PATH=$PATH:$(go env GOPATH)/bin
        fi
        make lint

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build API
      run: make build-api

    - name: Run tests
      run: |
        echo "üß™ Running unit tests..."
        go test -v -short ./tests/...
        echo "‚úÖ Unit tests completed"

    - name: Docker login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      timeout-minutes: 15
      run: |
        echo "üèóÔ∏è Building Docker image..."
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        
        echo "üì§ Pushing to Docker Hub..."
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        
        echo "‚úÖ Docker build and push completed"

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Clean up
      if: always()
      run: |
        docker system prune -f
        make clean