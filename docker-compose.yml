services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stanford_students}
      POSTGRES_USER: ${POSTGRES_USER:-admin_stan}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_stan -d stanford_students"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  app1:
    image: stanford-students-api:v1
    build: .
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-admin_stan}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-stanford_students}?sslmode=disable
      PORT: 8081
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  app2:
    image: stanford-students-api:v1
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-admin_stan}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-stanford_students}?sslmode=disable
      PORT: 8082
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "0.0.0.0:8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app1
      - app2
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge